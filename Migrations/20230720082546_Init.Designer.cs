// <auto-generated />
using System;
using GAP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GAP.Migrations
{
    [DbContext(typeof(GAPContext))]
    [Migration("20230720082546_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GAP.Models.DemandeAchat", b =>
                {
                    b.Property<int>("DemandeAchatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandeAchatID"));

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RespServiceAchatUserID")
                        .HasColumnType("int");

                    b.HasKey("DemandeAchatID");

                    b.HasIndex("RespServiceAchatUserID");

                    b.ToTable("DemandeAchat");
                });

            modelBuilder.Entity("GAP.Models.Devis", b =>
                {
                    b.Property<int>("DevisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DevisID"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReception")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FournisseurID")
                        .HasColumnType("int");

                    b.Property<int>("NombrePiece")
                        .HasColumnType("int");

                    b.Property<double?>("PrixTTL")
                        .HasColumnType("float");

                    b.Property<int?>("ProduitID")
                        .HasColumnType("int");

                    b.Property<int?>("RespServiceAchatId")
                        .HasColumnType("int");

                    b.HasKey("DevisID");

                    b.HasIndex("FournisseurID");

                    b.HasIndex("ProduitID");

                    b.HasIndex("RespServiceAchatId");

                    b.ToTable("Devis");
                });

            modelBuilder.Entity("GAP.Models.Facture", b =>
                {
                    b.Property<int>("FactureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactureID"));

                    b.Property<string>("FournisseurEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<int?>("ProduitID")
                        .HasColumnType("int");

                    b.Property<int>("RespServiceFinanceId")
                        .HasColumnType("int");

                    b.Property<bool>("Validite")
                        .HasColumnType("bit");

                    b.HasKey("FactureID");

                    b.HasIndex("ProduitID");

                    b.HasIndex("RespServiceFinanceId");

                    b.ToTable("Facture");
                });

            modelBuilder.Entity("GAP.Models.Fournisseur", b =>
                {
                    b.Property<int>("FournisseurID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FournisseurID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NombreTransaction")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FournisseurID");

                    b.ToTable("Fournisseur");
                });

            modelBuilder.Entity("GAP.Models.OffreVente", b =>
                {
                    b.Property<int>("OffreVenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffreVenteID"));

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<double>("PrixTTL")
                        .HasColumnType("float");

                    b.Property<bool>("Validite")
                        .HasColumnType("bit");

                    b.HasKey("OffreVenteID");

                    b.HasIndex("FournisseurId");

                    b.ToTable("OffreVente");
                });

            modelBuilder.Entity("GAP.Models.Produit", b =>
                {
                    b.Property<int>("ProduitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduitID"));

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NombrePiece")
                        .HasColumnType("int");

                    b.Property<int?>("OffreVenteID")
                        .HasColumnType("int");

                    b.Property<float>("PrixUnitaire")
                        .HasColumnType("real");

                    b.HasKey("ProduitID");

                    b.HasIndex("OffreVenteID");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("GAP.Models.RapportReception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceptServiceAchatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceptServiceAchatId");

                    b.ToTable("RapportReception");
                });

            modelBuilder.Entity("GAP.Models.RapportTestQualite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DevisId")
                        .HasColumnType("int");

                    b.Property<int?>("RespServiceQualiteId")
                        .HasColumnType("int");

                    b.Property<bool>("ValiditeEtat")
                        .HasColumnType("bit");

                    b.Property<bool>("ValiditeFonctionnement")
                        .HasColumnType("bit");

                    b.Property<bool>("ValiditeNbrPiece")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RespServiceQualiteId");

                    b.ToTable("RapportTestQualite");
                });

            modelBuilder.Entity("GAP.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GAP.Models.ReceptServiceAchat", b =>
                {
                    b.HasBaseType("GAP.Models.User");

                    b.HasDiscriminator().HasValue("ReceptServiceAchat");
                });

            modelBuilder.Entity("GAP.Models.RespServiceAchat", b =>
                {
                    b.HasBaseType("GAP.Models.User");

                    b.HasDiscriminator().HasValue("RespServiceAchat");
                });

            modelBuilder.Entity("GAP.Models.RespServiceFinance", b =>
                {
                    b.HasBaseType("GAP.Models.User");

                    b.HasDiscriminator().HasValue("RespServiceFinance");
                });

            modelBuilder.Entity("GAP.Models.RespServiceQualite", b =>
                {
                    b.HasBaseType("GAP.Models.User");

                    b.HasDiscriminator().HasValue("RespServiceQualite");
                });

            modelBuilder.Entity("GAP.Models.DemandeAchat", b =>
                {
                    b.HasOne("GAP.Models.RespServiceAchat", null)
                        .WithMany("DemandesAchats")
                        .HasForeignKey("RespServiceAchatUserID");
                });

            modelBuilder.Entity("GAP.Models.Devis", b =>
                {
                    b.HasOne("GAP.Models.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurID");

                    b.HasOne("GAP.Models.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitID");

                    b.HasOne("GAP.Models.RespServiceAchat", null)
                        .WithMany("Devis")
                        .HasForeignKey("RespServiceAchatId");

                    b.Navigation("Fournisseur");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("GAP.Models.Facture", b =>
                {
                    b.HasOne("GAP.Models.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitID");

                    b.HasOne("GAP.Models.RespServiceFinance", null)
                        .WithMany("HistoriqueFactures")
                        .HasForeignKey("RespServiceFinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("GAP.Models.OffreVente", b =>
                {
                    b.HasOne("GAP.Models.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("GAP.Models.Produit", b =>
                {
                    b.HasOne("GAP.Models.OffreVente", null)
                        .WithMany("Produits")
                        .HasForeignKey("OffreVenteID");
                });

            modelBuilder.Entity("GAP.Models.RapportReception", b =>
                {
                    b.HasOne("GAP.Models.ReceptServiceAchat", null)
                        .WithMany("HistoriqueRapportsReceptions")
                        .HasForeignKey("ReceptServiceAchatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GAP.Models.RapportTestQualite", b =>
                {
                    b.HasOne("GAP.Models.RespServiceQualite", null)
                        .WithMany("HistoriqueRapportQualite")
                        .HasForeignKey("RespServiceQualiteId");
                });

            modelBuilder.Entity("GAP.Models.OffreVente", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("GAP.Models.ReceptServiceAchat", b =>
                {
                    b.Navigation("HistoriqueRapportsReceptions");
                });

            modelBuilder.Entity("GAP.Models.RespServiceAchat", b =>
                {
                    b.Navigation("DemandesAchats");

                    b.Navigation("Devis");
                });

            modelBuilder.Entity("GAP.Models.RespServiceFinance", b =>
                {
                    b.Navigation("HistoriqueFactures");
                });

            modelBuilder.Entity("GAP.Models.RespServiceQualite", b =>
                {
                    b.Navigation("HistoriqueRapportQualite");
                });
#pragma warning restore 612, 618
        }
    }
}
