@model X.PagedList.IPagedList<GAP.Models.User>

@{
    ViewData["Title"] = "Index";
}


@if (User.IsInRole("Admin"))
{    
     <div class="home-content">


                <div class="overview-boxes">

            <div class="app-content-header">
                <h1 class="app-content-headerText">Users</h1>


            </div>
                <div class="app-content-actions">
                    <div class="adpagination-container">
                        <ul class="pagination">
                            <li class="page-item @(Model.HasPreviousPage ? "" : " disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page=1,
                                    SearchString=ViewBag.CurrentFilter })">First</a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : " disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page=Model.PageNumber - 1,
                                    SearchString=ViewBag.CurrentFilter })">Previous</a>
                            </li>
                            <li class="page-item active">
                                <a class="page-link">@Model.PageNumber</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : " disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page=Model.PageNumber + 1,
                                    SearchString=ViewBag.CurrentFilter })">Next</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : " disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page=Model.PageCount,
                                    SearchString=ViewBag.CurrentFilter })">Last</a>
                            </li>
                        </ul>
                    </div>
                </div>


            <form method="post" enctype="multipart/form-data" asp-action="ImportFromExcel">
                <label class="custum-file-upload" for="excelFile">
                    <div class="icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path fill="green" d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6m1.8 18H14l-2-3.4l-2 3.4H8.2l2.9-4.5L8.2 11H10l2 3.4l2-3.4h1.8l-2.9 4.5l2.9 4.5M13 9V3.5L18.5 9H13Z" />
                        </svg>
                    </div>
                    <div class="text">
                        <span>Upload</span>
                        <button type="submit"> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="green" d="M9 16h6v-6h4l-7-7l-7 7h4v6zm3-10.17L14.17 8H13v6h-2V8H9.83L12 5.83zM5 18h14v2H5z" /></svg></button>
                    </div>
                    <input type="file" id="excelFile" name="excelFile" accept=".xlsx, .xls" style="display: none;">
                </label>

            </form>

                <div class="app-content-actions">





 

                    <form method="get" asp-action="Index">
                        <input type="search" id="form1" class="search-bar" placeholder="user Email..."
                               name="SearchString" />
                    </form>

                

                </div>
            @if (TempData["DuplicateEmails"] != null)
            {
                var duplicateEmails = TempData["DuplicateEmails"] as string[];
                int itemsPerPage = 5; // Number of items to display per page
                int pageCount = (int)Math.Ceiling((double)duplicateEmails.Length / itemsPerPage);

                <div class="popup-overlay" id="popupOverlay">
                    <div class="popup-content">
                        <span class="popup-close" id="popupClose">&times;</span>
                        <div class="alert alert-warning">
                            <h2>@duplicateEmails.Length User(s) has been Rejected</h2>

                            @for (int pageIndex = 0; pageIndex < pageCount; pageIndex++)
                            {
                                <ul class="page-content" style="display: @(pageIndex == 0 ? "block" : "none");">
                                    @for (int i = pageIndex * itemsPerPage; i < Math.Min((pageIndex + 1) * itemsPerPage, duplicateEmails.Length); i++)
                                    {
                                        <li>@duplicateEmails[i]</li>
                                    }
                                </ul>
                            }

                            <!-- Pagination buttons -->
                            <div class="pagination">
                                @for (int pageIndex = 0; pageIndex < pageCount; pageIndex++)
                                {
                                    <button class="page-link" onclick="showPage(@pageIndex)">@pageIndex</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <script>
                // JavaScript to control the popup behavior and pagination
                const popupOverlay = document.getElementById('popupOverlay');
                const popupClose = document.getElementById('popupClose');

                // Show the popup and darken the background
                if (popupOverlay) {
                    popupOverlay.style.display = 'flex';
                    document.body.style.overflow = 'hidden';
                }

                // Close the popup and revert background
                if (popupClose) {
                    popupClose.addEventListener('click', () => {
                        popupOverlay.style.display = 'none';
                        document.body.style.overflow = 'auto';
                    });
                }

                // Show the selected page
                function showPage(pageIndex) {
                    const pages = document.querySelectorAll('.popup-content .page-content');
                    pages.forEach((page, index) => {
                        page.style.display = index === pageIndex ? 'block' : 'none';
                    });
                }
            </script>

        </div>








        <div class="sales-boxes">

            <div class="products-area-wrapper">
                <table class="custom-table">
                    <thead>
                        <tr>
                            <th class="profile-picture">Profile Picture</th>
                            <th>Email</th>
                            <th>Last Name</th>
                            <th>First Name</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (@Model != null)
                        {
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        <div class="profile-picture">

                                        @if (item.ProfilePicture != null)
                                        {
                                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(item.ProfilePicture)" alt="Profile Picture" />
                                        }
                                        else
                                        {
                                            <img src="~/images/image-prof.png" alt="Default Profile Picture" />
                                        }
                                        </div>
                                    </td>
                                    <td>@item.Email</td>
                                    <td>@item.LastName</td>
                                    <td>@item.FirstName</td>
                                    <td>@item.Role</td>
                        
                                    <td class="BTNS-container">


                                        <a class="EDIA-button" asp-action="Edit" asp-route-id="@item.UserID">
                                            <svg class="svg-icon" fill="none" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                                                <g stroke="#0a2558" stroke-linecap="round" stroke-width="2">
                                                    <path d="m20 20h-16" />
                                                    <path clip-rule="evenodd" d="m14.5858 4.41422c.781-.78105 2.0474-.78105 2.8284 0 .7811.78105.7811 2.04738 0 2.82843l-8.28322 8.28325-3.03046.202.20203-3.0304z" fill-rule="evenodd" />
                                                </g>
                                            </svg>
                                        </a>

                                        <a class="EDIA-button" asp-action="Details" asp-route-id="@item.UserID">
                                            <svg class="svg-icon" fill="#a649da" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z" stroke="#0a2558" stroke-width="2" />
                                            </svg>
                                        </a>


                                        <a class="EDIA-button" asp-action="Delete" asp-route-id="@item.UserID">
                                            <svg class="svg-icon" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M3 5H4V19C4 20.1 4.9 21 6 21H18C19.1 21 20 20.1 20 19V5H21C21.6 5 22 4.6 22 4V3C22 2.4 21.6 2 21 2H15V1.7C15 1.3 14.7 1 14.3 1H9.7C9.3 1 9 1.3 9 1.7V2H3C2.4 2 2 2.4 2 3V4C2 4.6 2.4 5 3 5ZM7 7V17H8V7H7ZM11 7V17H12V7H11ZM15 7V17H16V7H15Z" stroke="#0a2558" stroke-width="2" fill="none" />
                                            </svg>
                                        </a>


                                    </td>


                                </tr>


                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>





    </div>
}           

