@model X.PagedList.IPagedList<GAP.Models.Product>

@{
    ViewData["Title"] = "Index";
}

<main>
    <article>
       
        <div class="datatable-container">

            <h1 class="form-header">Products</h1>
           <!-- ======= Header tools ======= -->
            <div class="header-tools">



                <div class="tools">
                    <!-- Pagination Links -->
                    <div class="pagination-container">
                        <ul class="pagination">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page = 1, SearchString = ViewBag.CurrentFilter })">First</a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber - 1, SearchString = ViewBag.CurrentFilter })">Previous</a>
                            </li>
                            <li class="page-item active">
                                <a class="page-link">@Model.PageNumber</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page = Model.PageNumber + 1, SearchString = ViewBag.CurrentFilter })">Next</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" href="@Url.Action("Index", new { page = Model.PageCount, SearchString = ViewBag.CurrentFilter })">Last</a>
                            </li>
                        </ul>
                    </div>
                </div>


            </div>
<table class="table">
    <thead>
        <tr>
            <th>
                PrixUnitaire
            </th>
            <th>
                Prixtotal
            </th>
            <th>
                Nom
            </th>
            <th>
                NombrePiece
            </th>
            <th>
                Desc
            </th>
            <th>
                SupplierId
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Unitprice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Totalprice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ItemsNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Desc)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SupplierId)
            </td>
                            <td class="form-button disp BTNS" style="color:white; display: flex; align-items: center;">
                                <a asp-action="Edit" asp-route-id="@item.ProductID">
                                    <input type="submit" value="Edit" class="form-button EDI-button" style="margin-right: 5px;" />
                                </a>
                                <a asp-action="Details" asp-route-id="@item.ProductID">
                                    <input type="button" class="form-button DET-button" value="Details" style="margin-right: 5px;">
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.ProductID">
                                    <input type="button" class="form-button DEL-button" value="Delete" style="margin-right: 5px;">
                                </a>
                           
                            
                            
                            </td>
        </tr>
}
    </tbody>
</table>
            <div class="bbs">
                <a asp-action="Create" >
                    <input type="button" class="form-button BTL-button" value="Create New" style="margin-right: 5px;">
                </a>
                <form method="post" enctype="multipart/form-data" asp-action="ImportFromExcel">
                    <label class="custum-file-upload" for="excelFile">
                        <div class="icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path fill="green" d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6m1.8 18H14l-2-3.4l-2 3.4H8.2l2.9-4.5L8.2 11H10l2 3.4l2-3.4h1.8l-2.9 4.5l2.9 4.5M13 9V3.5L18.5 9H13Z" />
                            </svg>
                        </div>
                        <div class="text">
                            <span>Upload</span>
                            <button type="submit"> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="green" d="M9 16h6v-6h4l-7-7l-7 7h4v6zm3-10.17L14.17 8H13v6h-2V8H9.83L12 5.83zM5 18h14v2H5z" /></svg></button>
                        </div>
                        <input type="file" id="excelFile" name="excelFile" accept=".xlsx, .xls" style="display: none;">
                    </label>

                </form>

            </div>



</div>
</article>
</main>


@if (TempData["DuplicateProducts"] != null)
{
    var duplicateProductNames = TempData["DuplicateProducts"] as string[];
    <div class="popup-overlay" id="popupOverlay">
        <div class="popup-content">
            <span class="popup-close" id="popupClose">&times;</span>
            <div class="alert alert-warning">

                <h2>@duplicateProductNames.Length Product(s) has been Rejected</h2>

                <ul>
                    @foreach (var duplicateName in duplicateProductNames)
                    {
                        <li>@duplicateName</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

<script>

    // JavaScript to control the popup behavior
    const popupOverlay = document.getElementById('popupOverlay');
    const popupClose = document.getElementById('popupClose');

    // Show the popup and darken the background
    if (popupOverlay) {
        popupOverlay.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    // Close the popup and revert background
    if (popupClose) {
        popupClose.addEventListener('click', () => {
            popupOverlay.style.display = 'none';
            document.body.style.overflow = 'auto';
        });
    }

</script>